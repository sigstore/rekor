#
# Copyright 2021 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3
      - name: Extract version of Go to use
        run: echo "GOVERSION=$(cat Dockerfile|grep golang | awk ' { print $2 } ' | cut -d '@' -f 1 | cut -d ':' -f 2 | uniq)" >> $GITHUB_ENV
      - uses: actions/setup-go@f6164bd8c8acb4a71fb2791a8b6c4024ff038dab # v3.0.0
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Validate OpenAPI with Swagger
        run: make validate-openapi
      - name: Build
        run: make -C $GITHUB_WORKSPACE all
      - name: Fuzz-Build
        run: make -C $GITHUB_WORKSPACE fuzz
      - name: Test
        run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...
      - name: Upload Coverage Report
        uses: codecov/codecov-action@e3c560433a6cc60aec8812599b7844a7b4fa0d71 # v2.1.0
      - name: Ensure no files were modified as a result of the build
        run: git update-index --refresh && git diff-index --quiet HEAD -- || git diff --exit-code

  container-build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3
      - name: Extract version of Go to use
        run: echo "GOVERSION=$(cat Dockerfile|grep golang | awk ' { print $2 } ' | cut -d '@' -f 1 | cut -d ':' -f 2 | uniq)" >> $GITHUB_ENV
      - uses: actions/setup-go@f6164bd8c8acb4a71fb2791a8b6c4024ff038dab # v3.0.0
        with:
          go-version: ${{ env.GOVERSION }}
      - uses: imjasonh/setup-ko@2c3450ca27f6e6f2b02e72a40f2163c281a1f675 # v0.4
        with:
          version: v0.9.3
      - name: container
        run: |
          KO_PREFIX=ko.local make ko 2>&1 | tee output.txt
          docker run --rm $(tail -1 output.txt) version

  e2e:
    runs-on: ubuntu-20.04
    needs: build

    steps:
      - name: download minisign
        run: sudo add-apt-repository ppa:dysfunctionalprogramming/minisign && sudo apt-get update && sudo apt-get install minisign
      - uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3
      - name: Docker Build
        run: docker-compose build
      - name: Extract version of Go to use
        run: echo "GOVERSION=$(cat Dockerfile|grep golang | awk ' { print $2 } ' | cut -d '@' -f 1 | cut -d ':' -f 2 | uniq)" >> $GITHUB_ENV
      - uses: actions/setup-go@f6164bd8c8acb4a71fb2791a8b6c4024ff038dab # v3.0.0
        with:
          go-version: ${{ env.GOVERSION }}
      - name: CLI
        run: ./tests/e2e-test.sh
      - name: Upload logs if they exist
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3
        if: failure()
        with:
          name: Docker Compose logs
          path: /tmp/docker-compose.log

  sharding-e2e:
    runs-on: ubuntu-20.04
    needs: build

    steps:
      - name: download minisign
        run: sudo add-apt-repository ppa:dysfunctionalprogramming/minisign && sudo apt-get update && sudo apt-get install minisign
      - uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3
      - name: Docker Build
        run: docker-compose build
      - name: Extract version of Go to use
        run: echo "GOVERSION=$(cat Dockerfile|grep golang | awk ' { print $2 } ' | cut -d '@' -f 1 | cut -d ':' -f 2 | uniq)" >> $GITHUB_ENV
      - uses: actions/setup-go@f6164bd8c8acb4a71fb2791a8b6c4024ff038dab # v3.0.0
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Sharding Test
        run: ./tests/sharding-e2e-test.sh
      - name: Upload logs if they exist
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3
        if: failure()
        with:
          name: Docker Compose logs
          path: /tmp/docker-compose.log
