// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	stderrors "errors"
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	"github.com/sigstore/rekor/pkg/generated/models"
)

// NewCreateLogEntryParams creates a new CreateLogEntryParams object
//
// There are no default values defined in the spec.
func NewCreateLogEntryParams() CreateLogEntryParams {

	return CreateLogEntryParams{}
}

// CreateLogEntryParams contains all the bound params for the create log entry operation
// typically these are obtained from a http.Request
//
// swagger:parameters createLogEntry
type CreateLogEntryParams struct {
	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: body
	*/
	ProposedEntry models.ProposedEntry
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewCreateLogEntryParams() beforehand.
func (o *CreateLogEntryParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer func() {
			_ = r.Body.Close()
		}()
		body, err := models.UnmarshalProposedEntry(r.Body, route.Consumer)
		if err != nil {
			if stderrors.Is(err, io.EOF) {
				err = errors.Required("proposedEntry", "body", "")
			}
			res = append(res, err)
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			ctx := validate.WithOperationRequest(r.Context())
			if err := body.ContextValidate(ctx, route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.ProposedEntry = body
			}
		}
	} else {
		res = append(res, errors.Required("proposedEntry", "body", ""))
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
